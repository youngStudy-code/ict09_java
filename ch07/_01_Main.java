package ch07;

public class _01_Main {

	public static void main(String[] args) {
		
		System.out.println("<<<다향성>>>");
		System.out.println("<<<부모클래스 참조변수 = new 자식클래스();>>>");
		
		// 다양성: 부모 = new 자식, 즉 자식이 주체
		_01_Computer computer = new _01_DeskTop();
		
		computer.turnOn(); //부모에서도 호출
		computer.turnOff(); //부모에서도 호출
		//추상클래스
		computer.display(); // 재정의된 자식메서드 호출 (자식클래스가 new에 의해 실제 힙메모리 공간을 차지)
		computer.typing();
		
		/*
		 * <<<다향성>>>
		<<<부모클래스 참조변수 = new 자식클래스();>>>
		전원을 켭니다.
		전원을 끕니다.
		_01_DeskTop-display
		_01_DeskTop-typing
		 * 
		 * */
		
		System.out.println("----------------");
		System.out.println("<<<<손자클래스-자식클래스-부모클래스 호출>>>>");
		
		_01_NoteBook noteBook = new _01_MynoteBook();
		
		noteBook.turnOn();
		noteBook.turnOff();
		noteBook.display();
		noteBook.typing();
		
		
		   /*
	       * 추상이란?
	       * - 여러가지 사물이나 개념으로부터 공통이 되는 특성을 파악하는 것을 말한다.
	       * 
	       * [면접]
	       * 1. 추상클래스 => 업무표준화, 작업명세서 : 정의된 추상메서드
	       * - 하나 이상의 추상메서드를 가지고 있는 클래스를 의미한다.
	       * - abstract 키워드를 이용하여 구현되지 않는 추상메서드를 기술할 수 있다.
	       * - 자식클래스에게 구현을 위임하고자 할 때 사용되며, 프로그램의 확장성을 취해 많이 사용하는 설계방법이다.
	       * - 추상클래스는 일반메서드, 추상메서드 모두 올 수 있다.
	       * - 전제조건은 반드시 상속을 해야 한다.
	       * - 다형성 적용 가능하다.
	       * 
	       * - 문법 : public abstract class 클래스명 {
	       *             public abstract 반환형 메서드명();  // 추상메서드
	       *       }
	       * 
	       * 2. 추상메서드
	       * - 하위클래스가 어떤 클래스냐에 따라 구현코드가 달라지며, 하위클래스에 구현을 위임하는 것이다.
	       * - 미완성되어있는 메서드이며, 몸체가 없는 메서드로서 항상 세미콜론(;)으로 종료되어야 한다.
	       * 
	       *  3. 추상클래스의 상속
	       *  - 추상클래스를 상속받은 자식클래스는 추상메서드를 반드시 재정의(Override) 해야 하며,
	       *    재정의하지 않으면 컴파일 오류가 발생한다.
	       *  - 자식클래스에게 강제성과 통일성을 줄 수 있다.(협업시 작업명세서)  
	       *       
	       * 4. 추상클래스의 객체 생성
	       * - 추상클래스는 객체를 생성할 수 없으며(추상 메서드 때문), 상속 계층에서
	       *   추상적인 개념을 나타내기 위한 용도로 사용한다.
	       * - 상속을 통하여 자식클래스에서 추상메서드를 구현하고, 자식클래스 객체를 생성하여 메서드를 접근할 수 있다.  
	       * 
	       */
	      
	      // 추상클래스 객체생성 : 추상클래스는 객체를 생성할 수 있다.(추상메서드가 있으므로)
	      // _01_Computer computer = new _01_Computer(); => 오류
		
	}
}
